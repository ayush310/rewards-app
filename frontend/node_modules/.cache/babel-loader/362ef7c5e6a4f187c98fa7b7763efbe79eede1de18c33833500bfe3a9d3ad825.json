{"ast":null,"code":"var _jsxFileName = \"/Users/ayushkumarsingh/Desktop/Workspace/Company Assignments/capillary_assngmt/frontend/src/components/SideDrawer.js\",\n  _s = $RefreshSig$();\n// import { Button } from \"@chakra-ui/button\";\n// import { useDisclosure } from \"@chakra-ui/hooks\";\n// import { Input } from \"@chakra-ui/input\";\n// import { Box, Text } from \"@chakra-ui/layout\";\n// import {\n//   Menu,\n//   MenuButton,\n//   MenuDivider,\n//   MenuItem,\n//   MenuList,\n// } from \"@chakra-ui/menu\";\n// import {\n//   Drawer,\n//   DrawerBody,\n//   DrawerContent,\n//   DrawerHeader,\n//   DrawerOverlay,\n// } from \"@chakra-ui/modal\";\n// import { Tooltip } from \"@chakra-ui/tooltip\";\n// import { useHistory } from \"react-router-dom\";\n// import { useState } from \"react\";\n// import axios from \"axios\";\n// import { Spinner } from \"@chakra-ui/spinner\";\n// import UserListItem from \"./UserListItem\";\n// import { ChatState } from \"../context/ChatProvider\";\n\n// function SideDrawer() {\n//   const [search, setSearch] = useState(\"\");\n//   const [searchResult, setSearchResult] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [loadingChat, setLoadingChat] = useState(false);\n\n//   const { user } = ChatState();\n\n//   const toast = useToast();\n//   const { isOpen, onOpen, onClose } = useDisclosure();\n//   const history = useHistory();\n\n//   return (\n//     <>\n//       <Box\n//         d=\"flex\"\n//         justifyContent=\"space-between\"\n//         alignItems=\"center\"\n//         bg=\"white\"\n//         w=\"100%\"\n//         p=\"5px 10px 5px 10px\"\n//         borderWidth=\"5px\"\n//       >\n//         <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n//           <Button variant=\"ghost\" onClick={onOpen}>\n//             <i className=\"fas fa-search\"></i>\n//             <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n//               Search User\n//             </Text>\n//           </Button>\n//         </Tooltip>\n//         <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n//           High-Five\n//         </Text>\n//         <div>\n//           {/* <Menu>\n//             <MenuButton p={1}>\n//               <NotificationBadge\n//                 count={notification.length}\n//                 effect={Effect.SCALE}\n//               />\n//               <BellIcon fontSize=\"2xl\" m={1} />\n//             </MenuButton>\n//             <MenuList pl={2}>\n//               {!notification.length && \"No New Messages\"}\n//               {notification.map((notif) => (\n//                 <MenuItem\n//                   key={notif._id}\n//                   onClick={() => {\n//                     setSelectedChat(notif.chat);\n//                     setNotification(notification.filter((n) => n !== notif));\n//                   }}\n//                 >\n//                   {notif.chat.isGroupChat\n//                     ? `New Message in ${notif.chat.chatName}`\n//                     : `New Message from ${getSender(user, notif.chat.users)}`}\n//                 </MenuItem>\n//               ))}\n//             </MenuList>\n//           </Menu> */}\n//           <Menu>\n//             <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n//               <Avatar\n//                 size=\"sm\"\n//                 cursor=\"pointer\"\n//                 name={user.name}\n//                 src={user.pic}\n//               />\n//             </MenuButton>\n//             <MenuList>\n//               <ProfileModal user={user}>\n//                 <MenuItem>My Profile</MenuItem>{\" \"}\n//               </ProfileModal>\n//               <MenuDivider />\n//               <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n//             </MenuList>\n//           </Menu>\n//         </div>\n//       </Box>\n\n//       <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n//         <DrawerOverlay />\n//         <DrawerContent>\n//           <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n//           <DrawerBody>\n//             <Box d=\"flex\" pb={2}>\n//               <Input\n//                 placeholder=\"Search by name or email\"\n//                 mr={2}\n//                 value={search}\n//                 onChange={(e) => setSearch(e.target.value)}\n//               />\n//               <Button onClick={handleSearch}>Go</Button>\n//             </Box>\n//             {loading ? (\n//               <ChatLoading />\n//             ) : (\n//               searchResult?.map((item) => (\n//                 <UserListItem\n//                   key={item._id}\n//                   user={item}\n//                   handleFunction={() => accessChat(item._id)}\n//                 />\n//               ))\n//             )}\n//             {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n//           </DrawerBody>\n//         </DrawerContent>\n//       </Drawer>\n//     </>\n//   );\n// }\n\n// export default SideDrawer;\nimport { useState } from \"react\";\nimport { Drawer, DrawerBody, DrawerHeader, DrawerOverlay, DrawerContent, useDisclosure, Button, Box, Text } from \"@chakra-ui/react\";\nimport { RewardsState } from \"../context/RewardsProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SideDrawer() {\n  _s();\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const [placement, setPlacement] = useState(\"left\");\n  const {\n    rewards\n  } = RewardsState();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: onOpen,\n      children: \"My Rewards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Drawer, {\n      placement: placement,\n      onClose: onClose,\n      isOpen: isOpen,\n      children: [/*#__PURE__*/_jsxDEV(DrawerOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DrawerContent, {\n        children: [/*#__PURE__*/_jsxDEV(DrawerHeader, {\n          borderBottomWidth: \"1px\",\n          children: \"My Rewards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DrawerBody, {\n          children: rewards.length === 0 ? /*#__PURE__*/_jsxDEV(Text, {\n            children: \"No rewards yet. Spin the wheel!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this) : rewards.map((reward, index) => /*#__PURE__*/_jsxDEV(Box, {\n            bg: \"#89CFF0\",\n            w: \"100%\",\n            p: 4,\n            color: \"white\",\n            marginBottom: \"4px\",\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              children: reward\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(SideDrawer, \"26lAuYCkaTVOjeKq8wZSFcbAAEw=\", false, function () {\n  return [useDisclosure];\n});\n_c = SideDrawer;\nexport default SideDrawer;\nvar _c;\n$RefreshReg$(_c, \"SideDrawer\");","map":{"version":3,"names":["useState","Drawer","DrawerBody","DrawerHeader","DrawerOverlay","DrawerContent","useDisclosure","Button","Box","Text","RewardsState","jsxDEV","_jsxDEV","Fragment","_Fragment","SideDrawer","_s","isOpen","onOpen","onClose","placement","setPlacement","rewards","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","borderBottomWidth","length","map","reward","index","bg","w","p","color","marginBottom","_c","$RefreshReg$"],"sources":["/Users/ayushkumarsingh/Desktop/Workspace/Company Assignments/capillary_assngmt/frontend/src/components/SideDrawer.js"],"sourcesContent":["// import { Button } from \"@chakra-ui/button\";\n// import { useDisclosure } from \"@chakra-ui/hooks\";\n// import { Input } from \"@chakra-ui/input\";\n// import { Box, Text } from \"@chakra-ui/layout\";\n// import {\n//   Menu,\n//   MenuButton,\n//   MenuDivider,\n//   MenuItem,\n//   MenuList,\n// } from \"@chakra-ui/menu\";\n// import {\n//   Drawer,\n//   DrawerBody,\n//   DrawerContent,\n//   DrawerHeader,\n//   DrawerOverlay,\n// } from \"@chakra-ui/modal\";\n// import { Tooltip } from \"@chakra-ui/tooltip\";\n// import { useHistory } from \"react-router-dom\";\n// import { useState } from \"react\";\n// import axios from \"axios\";\n// import { Spinner } from \"@chakra-ui/spinner\";\n// import UserListItem from \"./UserListItem\";\n// import { ChatState } from \"../context/ChatProvider\";\n\n// function SideDrawer() {\n//   const [search, setSearch] = useState(\"\");\n//   const [searchResult, setSearchResult] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [loadingChat, setLoadingChat] = useState(false);\n\n//   const { user } = ChatState();\n\n//   const toast = useToast();\n//   const { isOpen, onOpen, onClose } = useDisclosure();\n//   const history = useHistory();\n\n//   return (\n//     <>\n//       <Box\n//         d=\"flex\"\n//         justifyContent=\"space-between\"\n//         alignItems=\"center\"\n//         bg=\"white\"\n//         w=\"100%\"\n//         p=\"5px 10px 5px 10px\"\n//         borderWidth=\"5px\"\n//       >\n//         <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n//           <Button variant=\"ghost\" onClick={onOpen}>\n//             <i className=\"fas fa-search\"></i>\n//             <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n//               Search User\n//             </Text>\n//           </Button>\n//         </Tooltip>\n//         <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n//           High-Five\n//         </Text>\n//         <div>\n//           {/* <Menu>\n//             <MenuButton p={1}>\n//               <NotificationBadge\n//                 count={notification.length}\n//                 effect={Effect.SCALE}\n//               />\n//               <BellIcon fontSize=\"2xl\" m={1} />\n//             </MenuButton>\n//             <MenuList pl={2}>\n//               {!notification.length && \"No New Messages\"}\n//               {notification.map((notif) => (\n//                 <MenuItem\n//                   key={notif._id}\n//                   onClick={() => {\n//                     setSelectedChat(notif.chat);\n//                     setNotification(notification.filter((n) => n !== notif));\n//                   }}\n//                 >\n//                   {notif.chat.isGroupChat\n//                     ? `New Message in ${notif.chat.chatName}`\n//                     : `New Message from ${getSender(user, notif.chat.users)}`}\n//                 </MenuItem>\n//               ))}\n//             </MenuList>\n//           </Menu> */}\n//           <Menu>\n//             <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n//               <Avatar\n//                 size=\"sm\"\n//                 cursor=\"pointer\"\n//                 name={user.name}\n//                 src={user.pic}\n//               />\n//             </MenuButton>\n//             <MenuList>\n//               <ProfileModal user={user}>\n//                 <MenuItem>My Profile</MenuItem>{\" \"}\n//               </ProfileModal>\n//               <MenuDivider />\n//               <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n//             </MenuList>\n//           </Menu>\n//         </div>\n//       </Box>\n\n//       <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n//         <DrawerOverlay />\n//         <DrawerContent>\n//           <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n//           <DrawerBody>\n//             <Box d=\"flex\" pb={2}>\n//               <Input\n//                 placeholder=\"Search by name or email\"\n//                 mr={2}\n//                 value={search}\n//                 onChange={(e) => setSearch(e.target.value)}\n//               />\n//               <Button onClick={handleSearch}>Go</Button>\n//             </Box>\n//             {loading ? (\n//               <ChatLoading />\n//             ) : (\n//               searchResult?.map((item) => (\n//                 <UserListItem\n//                   key={item._id}\n//                   user={item}\n//                   handleFunction={() => accessChat(item._id)}\n//                 />\n//               ))\n//             )}\n//             {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n//           </DrawerBody>\n//         </DrawerContent>\n//       </Drawer>\n//     </>\n//   );\n// }\n\n// export default SideDrawer;\nimport { useState } from \"react\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  useDisclosure,\n  Button,\n  Box,\n  Text,\n} from \"@chakra-ui/react\";\nimport { RewardsState } from \"../context/RewardsProvider\";\n\nfunction SideDrawer() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [placement, setPlacement] = useState(\"left\");\n\n  const { rewards } = RewardsState();\n\n  return (\n    <>\n      <Button onClick={onOpen}>My Rewards</Button>\n      <Drawer placement={placement} onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">My Rewards</DrawerHeader>\n          <DrawerBody>\n            {rewards.length === 0 ? (\n              <Text>No rewards yet. Spin the wheel!</Text>\n            ) : (\n              rewards.map((reward, index) => (\n                <Box\n                  key={index}\n                  bg=\"#89CFF0\"\n                  w=\"100%\"\n                  p={4}\n                  color=\"white\"\n                  marginBottom=\"4px\"\n                >\n                  <Text>{reward}</Text>\n                </Box>\n              ))\n            )}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\nexport default SideDrawer;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SACEC,MAAM,EACNC,UAAU,EACVC,YAAY,EACZC,aAAa,EACbC,aAAa,EACbC,aAAa,EACbC,MAAM,EACNC,GAAG,EACHC,IAAI,QACC,kBAAkB;AACzB,SAASC,YAAY,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1D,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAAQ,CAAC,GAAGb,aAAa,CAAC,CAAC;EACnD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,MAAM,CAAC;EAElD,MAAM;IAAEsB;EAAQ,CAAC,GAAGZ,YAAY,CAAC,CAAC;EAElC,oBACEE,OAAA,CAAAE,SAAA;IAAAS,QAAA,gBACEX,OAAA,CAACL,MAAM;MAACiB,OAAO,EAAEN,MAAO;MAAAK,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC5ChB,OAAA,CAACX,MAAM;MAACmB,SAAS,EAAEA,SAAU;MAACD,OAAO,EAAEA,OAAQ;MAACF,MAAM,EAAEA,MAAO;MAAAM,QAAA,gBAC7DX,OAAA,CAACR,aAAa;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjBhB,OAAA,CAACP,aAAa;QAAAkB,QAAA,gBACZX,OAAA,CAACT,YAAY;UAAC0B,iBAAiB,EAAC,KAAK;UAAAN,QAAA,EAAC;QAAU;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAc,CAAC,eAC/DhB,OAAA,CAACV,UAAU;UAAAqB,QAAA,EACRD,OAAO,CAACQ,MAAM,KAAK,CAAC,gBACnBlB,OAAA,CAACH,IAAI;YAAAc,QAAA,EAAC;UAA+B;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,GAE5CN,OAAO,CAACS,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACxBrB,OAAA,CAACJ,GAAG;YAEF0B,EAAE,EAAC,SAAS;YACZC,CAAC,EAAC,MAAM;YACRC,CAAC,EAAE,CAAE;YACLC,KAAK,EAAC,OAAO;YACbC,YAAY,EAAC,KAAK;YAAAf,QAAA,eAElBX,OAAA,CAACH,IAAI;cAAAc,QAAA,EAAES;YAAM;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO;UAAC,GAPhBK,KAAK;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAQP,CACN;QACF;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACS,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA,eACT,CAAC;AAEP;AAACZ,EAAA,CAnCQD,UAAU;EAAA,QACmBT,aAAa;AAAA;AAAAiC,EAAA,GAD1CxB,UAAU;AAoCnB,eAAeA,UAAU;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}